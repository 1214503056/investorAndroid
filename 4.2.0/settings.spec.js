var fs = require('fs');var path = require('path');var cp = require('child_process');var chai = require("chai");var should = chai.should();var JWebDriver = require('jwebdriver');chai.use(JWebDriver.chaiSupportChainPromise);var rootPath = getRootPath();var appPath = '/Users/caribou_v4.2.0_20170810.apk';var platformName = 'Android';module.exports = function(){    var driver, testVars;    before(function(){        var self = this;        driver = self.driver;        testVars = self.testVars;    });    it('tap: 请输入手机号 ( //*[@text="请输入手机号"] )', async function(){        await driver.wait('//*[@text="请输入手机号"]', 30000).sendElementActions('tap');    });    it('sendKeys: 13123456789{ESCAPE}', async function(){        await driver.sendKeys(_(`13123456789{ESCAPE}`));    });    it('tap: 下一步 ( //*[@text="下一步"] )', async function(){        await driver.wait('//*[@text="下一步"]', 30000).sendElementActions('tap');    });    it('tap: 请输入6位验证码 ( //*[@text="请输入6位验证码"] )', async function(){        await driver.wait('//*[@text="请输入6位验证码"]', 30000).sendElementActions('tap');    });    it('sendKeys: 123456{ESCAPE}', async function(){        await driver.sendKeys(_(`123456{ESCAPE}`));    });    it('tap: 登录 ( //*[@text="登录"] )', async function(){        await driver.wait('//*[@text="登录"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@text="我的"], equal, 我的', async function(){        await driver.sleep(300).wait('//*[@text="我的"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`我的`));    });    it('tap: 我的 ( //*[@text="我的"] )', async function(){        await driver.wait('//*[@text="我的"]', 30000).sendElementActions('tap');    });    it('drag: 572, 1506, 636, 1110, 0.88', async function(){        await driver.sendActions('drag', {fromX: 572, fromY:1506, toX:636, toY:1110, duration: 0.88});    });    it('tap: 设置 ( //*[@text="设置"] )', async function(){        await driver.wait('//*[@text="设置"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView, equal, 设置', async function(){        await driver.sleep(300).wait('//*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`设置`));    });    it('expect: text, //*[@text="功能设置"], equal, 功能设置', async function(){        await driver.sleep(300).wait('//*[@text="功能设置"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`功能设置`));    });    it('expect: text, //*[@text="会议同步至日历"], equal, 会议同步至日历', async function(){        await driver.sleep(300).wait('//*[@text="会议同步至日历"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`会议同步至日历`));    });    it('tap: ON ( //*[@text="ON"] )', async function(){        await driver.wait('//*[@text="ON"]', 30000).sendElementActions('tap');    });    it('tap: OFF ( //*[@text="OFF"] )', async function(){        await driver.wait('//*[@text="OFF"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@text="问题反馈"], equal, 问题反馈', async function(){        await driver.sleep(300).wait('//*[@text="问题反馈"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`问题反馈`));    });    it('tap: 问题反馈 ( //*[@text="问题反馈"] )', async function(){        await driver.wait('//*[@text="问题反馈"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView, equal, 问题反馈', async function(){        await driver.sleep(300).wait('//*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`问题反馈`));    });    it('tap: 感谢使用逐鹿X，任何问... ( //*[@text="感谢使用逐鹿X，任何问题和建议都请及时告诉我们，我们十分重视你的意见。"] )', async function(){        await driver.wait('//*[@text="感谢使用逐鹿X，任何问题和建议都请及时告诉我们，我们十分重视你的意见。"]', 30000).sendElementActions('tap');    });    it('sendKeys: 测试一下，呵呵{ESCAPE}', async function(){        await driver.sendKeys(_(`测试一下，呵呵{ESCAPE}`));    });    it('tap: 发送反馈 ( //*[@text="发送反馈"] )', async function(){        await driver.wait('//*[@text="发送反馈"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView, equal, 设置', async function(){        await driver.sleep(300).wait('//*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`设置`));    });    it('expect: text, //*[@text="去评分"], equal, 去评分', async function(){        await driver.sleep(300).wait('//*[@text="去评分"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`去评分`));    });    it('expect: text, //*[@text="关于我们"], equal, 关于我们', async function(){        await driver.sleep(300).wait('//*[@text="关于我们"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`关于我们`));    });    it('tap: 关于我们 ( //*[@text="关于我们"] )', async function(){        await driver.wait('//*[@text="关于我们"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView, equal, 关于我们', async function(){        await driver.sleep(300).wait('//*[@resource-id="android:id/content"]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.TextView', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`关于我们`));    });    it('drag: 385, 1456, 495, 794, 0.80', async function(){        await driver.sendActions('drag', {fromX: 385, fromY:1456, toX:495, toY:794, duration: 0.80});    });    it('drag: 547, 730, 369, 1387, 1.08', async function(){        await driver.sendActions('drag', {fromX: 547, fromY:730, toX:369, toY:1387, duration: 1.08});    });    it('back: ', async function(){        await driver.back();    });    it('expect: text, //*[@text="当前版本 v4.2"], contain, 当前版本', async function(){        await driver.sleep(300).wait('//*[@text="当前版本 v4.2"]', 30000)               .text()               .should.not.be.a('error')               .should.contain(_(`当前版本`));    });    it('expect: text, //*[@text="退出登录"], equal, 退出登录', async function(){        await driver.sleep(300).wait('//*[@text="退出登录"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`退出登录`));    });    it('tap: 退出登录 ( //*[@text="退出登录"] )', async function(){        await driver.wait('//*[@text="退出登录"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@text="确认要退出逐鹿X？"], contain, 确认要退出', async function(){        await driver.sleep(300).wait('//*[@text="确认要退出逐鹿X？"]', 30000)               .text()               .should.not.be.a('error')               .should.contain(_(`确认要退出`));    });    it('tap: 退出登录 ( //*[@text="退出登录"] )', async function(){        await driver.wait('//*[@text="退出登录"]', 30000).sendElementActions('tap');    });    it('expect: text, //*[@text="验证码登录"], equal, 验证码登录', async function(){        await driver.sleep(300).wait('//*[@text="验证码登录"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`验证码登录`));    });    it('expect: text, //*[@text="注册"], equal, 注册', async function(){        await driver.sleep(300).wait('//*[@text="注册"]', 30000)               .text()               .should.not.be.a('error')               .should.equal(_(`注册`));    });    function _(str){        if(typeof str === 'string'){            return str.replace(/\{\{(.+?)\}\}/g, function(all, key){                return testVars[key] || '';            });        }        else{            return str;        }    }};if(module.parent && /mocha\.js/.test(module.parent.id)){    runThisSpec();}function runThisSpec(){    // read config    var config = require(rootPath + '/config.json');    var webdriverConfig = Object.assign({},config.webdriver);    var host = webdriverConfig.host;    var port = webdriverConfig.port || 4444;    var testVars = config.vars;    var screenshotPath = rootPath + '/screenshots';    var doScreenshot = fs.existsSync(screenshotPath);    var specName = path.relative(rootPath, __filename).replace(/\\/g,'/').replace(/\.js$/,'');    var arrDeviceList = getEnvList() || getDeviceList(platformName);    if(arrDeviceList.length ===0 ){        console.log('Search mobile device failed!');        process.exit(1);    }    arrDeviceList.forEach(function(device){        var caseName = specName + ' : ' + (device.name?device.name+' ['+device.udid+']':device.udid);        if(doScreenshot){            mkdirs(path.dirname(screenshotPath + '/' + caseName));        }        describe(caseName, function(){            var stepId = 1;            this.timeout(600000);            this.slow(1000);            before(function(){                var self = this;                var driver = new JWebDriver({                    'host': host,                    'port': port                });                self.driver = driver.session({                    'platformName': platformName,                    'udid': device.udid,                    'app': /^(\/|[a-z]:\\|https?:\/\/)/i.test(appPath) ? appPath : rootPath + '/' + appPath                });                self.testVars = testVars;                return self.driver;            });            module.exports();            afterEach(function(){                if(doScreenshot){                    var filepath = screenshotPath + '/' + caseName.replace(/[^\/]+$/, function(all){                        return all.replace(/\s*[:\.\:\-\s]\s*/g, '_');                    }) + '_' + (stepId++);                    return this.driver.getScreenshot(filepath + '.png').source().then(function(code){                        fs.writeFileSync(filepath + '.json', code);                    }).catch(function(){});                }            });            after(function(){                return this.driver.close();            });        });    });}function getRootPath(){    var rootPath = path.resolve(__dirname);    while(rootPath){        if(fs.existsSync(rootPath + '/config.json')){            break;        }        rootPath = rootPath.substring(0, rootPath.lastIndexOf(path.sep));    }    return rootPath;}function mkdirs(dirname){    if(fs.existsSync(dirname)){        return true;    }else{        if(mkdirs(path.dirname(dirname))){            fs.mkdirSync(dirname);            return true;        }    }}function callSpec(name){    try{        require(rootPath + '/' + name)();    }    catch(e){        console.log(e)        process.exit(1);    }}function getEnvList(){    var strEnvList = process.env.devices;    if(strEnvList){        return strEnvList.split(/\s*,\s*/).map(function(udid){            return {udid: udid};        });    }}function getDeviceList(platformName){    var arrDeviceList = [];    var strText, match;    if(platformName === 'Android')    {        // for android        strText = cp.execSync('adb devices').toString();        strText.replace(/(.+?)\s+device\r?\n/g, function(all, deviceName){            arrDeviceList.push({                udid: deviceName            });        });    }    else{        // ios real device        strText = cp.execSync('idevice_id -l').toString();        strText.replace(/(.+)\r?\n/g, function(all, udid){            var deviceName = cp.execSync('idevice_id -d '+udid).toString();            deviceName = deviceName.replace(/\r?\n/g, '');            arrDeviceList.push({                name: deviceName,                udid: udid            });        });        // ios simulator        strText = cp.execSync('xcrun simctl list devices').toString();        strText.replace(/\r?\n\s*(.+?)\s+\((.+?)\) \(Booted\)/g, function(all, deviceName, udid){            arrDeviceList.push({                name: deviceName,                udid: udid            });        });    }    return arrDeviceList;}